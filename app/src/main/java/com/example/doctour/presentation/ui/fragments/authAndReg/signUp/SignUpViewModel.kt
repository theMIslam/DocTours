package com.example.doctour.presentation.ui.fragments.authAndReg.signUpimport com.example.doctour.base.BaseViewModelimport com.example.doctour.domain.model.TokenRefreshimport com.example.doctour.domain.model.UserRegistrationimport com.example.doctour.domain.usecases.SignUpUseCaseimport com.example.doctour.presentation.model.register.UserRegistrationUIimport com.example.doctour.presentation.model.register.toUserRegistrationUIimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.asStateFlowimport javax.inject.Inject@HiltViewModelclass SignUpViewModel @Inject constructor(private val signUpUseCase: SignUpUseCase) : BaseViewModel() {    private val _signUpState = mutableUiStateFlow<UserRegistrationUI>()    val signUpState = _signUpState.asStateFlow()    private val _tokenRefresh = MutableUIStateFlow<TokenRefresh>()    val tokenRefresh = _tokenRefresh.asStateFlow()    fun registerUser(        phone_number: String,        fullname: String,        gender: String,        birthday: String,        password: String    ) = signUpUseCase(        UserRegistration(        phone_number, fullname, gender, birthday, password    )    ).collectNetworkRequest(_signUpState){            it.toUserRegistrationUI()    }//    = authenticationRepositoryImpl.registerUser(//        phone_number, fullname, gender, birthday, password//    ).gatherRequest(_signUpState)//    fun signUp(//        username: String,//        number: String,//        password: String,//        password_again: String//    ) = authenticationRepositoryImpl.signUp(//        username,//        number,//        password,//        password_again//    ).gatherRequest(_signUpState)}